{"name":"Reproduzirvideo","tagline":"Exercício 6 de 8 da Lista de Padrões de Projeto","body":"### Diagrama do Padrão Template Method\r\n\r\n\r\n\r\n\r\n### Explicação\r\n\r\nPara definir o codec para reproduzir o vídeo escohido, sendo que isso só se saberá em tempo de execução. \r\n\r\nComeçou-se, então, se definindo o que seria um vídeo (mostrado no diagrama), esse vídeo contem a definição do seu formato como um dos atributos no formato de um inteiro, este a qual tem um **Enum** equivalente a qual é equiparado. \r\n\r\n`public enum Form {\r\n    AVI(1), MP3(2), MP4(5);\r\n    \r\n    public int valorFormato;\r\n    \r\n    Form(int valor){\r\n        this.valorFormato = valor;\r\n    }\r\n    \r\n    public int getValor(){\r\n        return this.valorFormato;\r\n    }\r\n    \r\n}`\r\n\r\nCaso corresponda a algum dos termos, este é reproduzido, se não é emitida uma exceção em tempo de execução.\r\n\r\n`public static Formato getFormato(int formato){\r\n\r\n\r\n        if (formato == Form.AVI.getValor()){\r\n            return new FormatoAVI();\r\n        }\r\n        else if (formato == Form.MP3.getValor()){\r\n            return new FormatoMP3();\r\n        }\r\n        else if (formato == Form.MP4.getValor()){\r\n            return new FormatoMP4();\r\n        }\r\n        else{\r\n            throw new  RuntimeException(\"“A vida é um grande e completo texto, \"\r\n                            + \"que precisa de muitas vírgulas para ser escrito, \"\r\n                            + \"ainda que essas vírgulas assumam em alguns momentos formatos de lágrimas.” \\n\"\r\n                            + \"―Augusto Cury\");\r\n        }\r\n\r\n\r\n    }\r\n`\r\n\r\nQuanto a reprodução do vídeo em si, está já é setada no momento em que é construído o objeto, da seguinte forma:\r\n\r\n`\r\n\r\nFormato(String nome){\r\n\r\n        carregaArquivoLegenda();\r\n        reproduzVideo();\r\n        finalizaReproducao();\r\n\r\n    }\r\n`\r\n\r\nEsses métodos, no entanto só serão implementados pelos seus descendentes, ou seja, cada formato concreto, da seguinte forma, por exemplo, no formato AVI:\r\n\r\n`public class FormatoAVI extends Formato{\r\n    \r\n    FormatoAVI(){\r\n        super(\"AVI\");\r\n    }\r\n\r\n    @Override\r\n    public void carregaArquivoLegenda() {\r\n        System.out.println(\"Carregando Arquivo AVI\");\r\n        System.out.println(\"Carregando Legenda\");\r\n    }\r\n\r\n    @Override\r\n    public void reproduzVideo() {\r\n        System.out.println(\"Reproduzindo Vídeo no Formato AVI\");\r\n    }\r\n\r\n    @Override\r\n    public void finalizaReproducao() {\r\n        System.out.println(\"The End\");\r\n        System.out.println(\"Finalizando Reprodução do AVI\");\r\n    }\r\n    \r\n}\r\n`\r\n\r\n\r\n### Motivação\r\n\r\n> “Definir o esqueleto de um algoritmo em uma operação, postergando alguns passos para as subclasses. Template Method permite que subclasses redefinam certos passo de um algoritmo sem mudar a estrutura do mesmo.” - GAMMA, Erich et al. Padrões de Projeto: Soluções reutilizáveis de software orientado a objetos.\r\n\r\nProporciona facilidade de alteração do algoritmo principal. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}